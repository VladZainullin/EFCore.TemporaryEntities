// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sample;

#nullable disable

namespace Sample.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240130205830_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sample.People", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Sample.People", b =>
                {
                    b.OwnsOne("Sample.Family", "Family", b1 =>
                        {
                            b1.Property<Guid>("PeopleId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("HasPartner")
                                .HasColumnType("boolean");

                            b1.Property<int>("QuantityOfChildren")
                                .HasColumnType("integer");

                            b1.HasKey("PeopleId");

                            b1.HasIndex("HasPartner");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PeopleId");
                        });

                    b.OwnsOne("Sample.Identification", "Identification", b1 =>
                        {
                            b1.Property<Guid>("PeopleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PeopleId");

                            b1.HasIndex("DateOfBirth")
                                .IsUnique();

                            b1.HasIndex("Gender")
                                .IsDescending();

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PeopleId");
                        });

                    b.OwnsOne("Sample.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PeopleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("House")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PeopleId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PeopleId");
                        });

                    b.OwnsOne("Sample.Work", "Work", b1 =>
                        {
                            b1.Property<Guid>("PeopleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Salary")
                                .HasColumnType("numeric");

                            b1.HasKey("PeopleId");

                            b1.ToTable("People");

                            b1.WithOwner()
                                .HasForeignKey("PeopleId");

                            b1.OwnsOne("Sample.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("WorkPeopleId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("House")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Region")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("WorkPeopleId");

                                    b2.ToTable("People");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkPeopleId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Family")
                        .IsRequired();

                    b.Navigation("Identification")
                        .IsRequired();

                    b.Navigation("Work")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
